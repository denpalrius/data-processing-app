services:
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: file_processor
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "file_processor"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./volumes/postgres-data:/var/lib/postgresql/data
      - ./infrastructure/pg_init:/docker-entrypoint-initdb.d
    env_file:
      - .env

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    entrypoint:
      ["sh", "-c", "chmod +x /usr/bin/minio_init.sh && /usr/bin/minio_init.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./volumes/minio-data:/data
      - ./infrastructure/minio/minio_init.sh:/usr/bin/minio_init.sh
    env_file:
      - .env

  nats:
    image: nats:latest
    container_name: nats
    ports:
      - "4222:4222"
      - "8222:8222"
    command: "-js"
    healthcheck:
      test: ["CMD", "nats-server", "--help"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./volumes/nats-data:/data

  sse-server:
    container_name: sse-server
    build:
      context: ./sse
    ports:
      - "8081:8081"

  file-processing-service:
    container_name: file-processing-service
    build:
      context: ./file-processing-service
    environment:
      MINIO_ENDPOINT: minio
      MINIO_PORT: ${MINIO_PORT}
      MINIO_USE_SSL: false
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_STAGING_BUCKET: staging
      MINIO_PROCESSED_BUCKET: processed

      NATS_SERVERS: nats://nats:4222
      NATS_STAGED_SUBJECT: file.upload.completed
      NATS_PROCESSED_SUBJECT: file.processing.completed
    depends_on:
      minio:
        condition: service_healthy
      nats:
        condition: service_healthy
    env_file:
      - .env

  file-upload-service:
    container_name: file-upload-service
    build:
      context: ./file-upload-service
    ports:
      - "3002:3002"
    environment:
      LOGGER_LEVEL: ${LOGGER_LEVEL}

      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}

      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_PORT: ${MINIO_PORT}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_STAGING_BUCKET: ${MINIO_STAGING_BUCKET}
      MINIO_PROCESSED_BUCKET: ${MINIO_PROCESSED_BUCKET}

      NATS_SERVERS: ${NATS_SERVERS}
      NATS_STAGED_SUBJECT: ${NATS_STAGED_SUBJECT}
      NATS_PROCESSED_SUBJECT: ${NATS_PROCESSED_SUBJECT}

      SSE_BROADCAST_URL: ${SSE_BROADCAST_URL}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      nats:
        condition: service_healthy
      sse-server:
        condition: service_started
      file-processing-service:
        condition: service_started

  frontend:
    container_name: frontend
    build:
      context: ./frontend    
    # ports:
    #   - "3000:3000"
    environment:
      API_GATEWAY_URL: http://file-upload-service:3001
      MINIO_REPLACEMENT_URL: http://localhost:9000
      SSE_EVENTS_URL: ${SSE_EVENTS_URL}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://frontend:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      file-upload-service:
        condition: service_started
      file-processing-service:
        condition: service_started
      sse-server:
        condition: service_started

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "81:80"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      frontend:
        condition: service_started
