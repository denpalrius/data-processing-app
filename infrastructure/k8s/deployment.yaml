apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
type: Opaque
data:
  POSTGRES_PASSWORD: ZGV2MTIzX2FkbWlu # base64 encoded 'dev123_admin'
  MINIO_SECRET_KEY: TjlXWVBabFlVTXJvVGRJc056d2xaUVZGVkk2cFE1cEZpNTVjQzlVRA== # base64 encoded

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  POSTGRES_DB: file_processor
  POSTGRES_USER: admin
  MINIO_ROOT_USER: admin
  MINIO_ACCESS_KEY: UpcdoQgnk5Z8liDwyaXp
  MINIO_STAGING_BUCKET: staging
  MINIO_PROCESSED_BUCKET: processed
  NATS_SERVERS: nats://nats:4222
  WEBSOCKET_URL: ws://websocket-server:8080/ws

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          envFrom:
            - configMapRef:
                name: app-config
            - secretRef:
                name: app-secrets
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: minio/minio
          args:
            - server
            - /data
            - --console-address
            - ":9001"
          envFrom:
            - configMapRef:
                name: app-config
            - secretRef:
                name: app-secrets
          volumeMounts:
            - name: minio-storage
              mountPath: /data
      volumes:
        - name: minio-storage
          persistentVolumeClaim:
            claimName: minio-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nats
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nats
  template:
    metadata:
      labels:
        app: nats
    spec:
      containers:
        - name: nats
          image: nats:latest
          args: ["-js"]
          volumeMounts:
            - name: nats-storage
              mountPath: /data
      volumes:
        - name: nats-storage
          persistentVolumeClaim:
            claimName: nats-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nats-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: websocket-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: websocket-server
  template:
    metadata:
      labels:
        app: websocket-server
    spec:
      containers:
        - name: websocket-server
          image: websocket-server:latest
          envFrom:
            - configMapRef:
                name: app-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: file-processing-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: file-processing-service
  template:
    metadata:
      labels:
        app: file-processing-service
    spec:
      containers:
        - name: file-processing-service
          image: file-processing-service:latest
          envFrom:
            - configMapRef:
                name: app-config
            - secretRef:
                name: app-secrets

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: frontend:latest
          envFrom:
            - configMapRef:
                name: app-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    server {
      listen 80;
      location / {
        proxy_pass http://frontend:3000;
      }
    }
